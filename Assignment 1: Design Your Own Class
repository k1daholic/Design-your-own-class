# Assignment 1: Design Your Own Class

# Parent class with a constructor and a common method
class Vehicle:
    """
    A base class representing a vehicle.
    """
    def __init__(self, make, model):
        # Attributes to initialize the object
        self.make = make
        self.model = model

    def start_engine(self):
        """A common method for all vehicles."""
        return f"The engine of the {self.make} {self.model} starts."

# Child class inheriting from Vehicle
class Car(Vehicle):
    """
    A class representing a car, inheriting from Vehicle.
    """
    def __init__(self, make, model, num_doors):
        # Use a constructor to initialize the object with unique values
        super().__init__(make, model)  # Call the parent class's constructor
        self.num_doors = num_doors

    # Activity 2: Polymorphism Challenge - The 'move' method is different for each class
    def move(self):
        """A specific implementation of the 'move' method for a car."""
        return f"The {self.make} {self.model} is driving on the road."

# Another child class for a different type of vehicle
class Plane(Vehicle):
    """
    A class representing a plane, inheriting from Vehicle.
    """
    def __init__(self, make, model, max_altitude):
        super().__init__(make, model)
        self.max_altitude = max_altitude

    # Activity 2: Polymorphism Challenge - The 'move' method is different for each class
    def move(self):
        """A specific implementation of the 'move' method for a plane."""
        return f"The {self.make} {self.model} is flying high in the sky."

# Another child class for a different type of vehicle
class Boat(Vehicle):
    """
    A class representing a boat, inheriting from Vehicle.
    """
    def __init__(self, make, model, is_motorized):
        super().__init__(make, model)
        self.is_motorized = is_motorized

    # Activity 2: Polymorphism Challenge - The 'move' method is different for each class
    def move(self):
        """A specific implementation of the 'move' method for a boat."""
        return f"The {self.make} {self.model} is sailing on the water."

# --- Example Usage ---
if __name__ == "__main__":
    # Create instances of each class
    my_car = Car(make="Toyota", model="Camry", num_doors=4)
    my_plane = Plane(make="Boeing", model="747", max_altitude=40000)
    my_boat = Boat(make="Sea Ray", model="230", is_motorized=True)

    # Demonstrate polymorphism by calling the same 'move' method on different objects
    print(my_car.move())
    print(my_plane.move())
    print(my_boat.move())
    
    # Demonstrate the inherited method
    print("\nInherited method demonstration:")
    print(my_car.start_engine())
    print(my_plane.start_engine())
    print(my_boat.start_engine())

    # Demonstrate accessing a unique attribute
    print(f"\nThe car has {my_car.num_doors} doors.")
